generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id            Int             @id @default(autoincrement())
  postId        Int             @map("post_id")
  userId        Int?            @map("user_id")
  commentId     Int?            @map("comment_id")
  createdAt     DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?       @default(now()) @map("updated_at") @db.Timestamptz(6)
  content       String?         @db.VarChar
  isHelpful     Boolean?        @default(false)
  comment_votes comment_votes[]
  comments      comments?       @relation("commentsTocomments", fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_fkey")
  otherComments comments[]      @relation("commentsTocomments")
  posts         posts           @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_fkey")
  users         users?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fkey")
  files         files[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model files {
  id        Int       @id(map: "post_attachments_pkey") @default(autoincrement())
  filename  String    @db.VarChar
  postId    Int?      @map("post_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  userId    Int?      @map("user_id")
  commentId Int?      @map("comment_id")
  comments  comments? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_fk")
  posts     posts?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_fk")
  users     users?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "usesr_fk")
}

model post_statuses {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar
  posts posts[]
}

model posts {
  id           Int            @id @default(autoincrement())
  description  String         @db.VarChar
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  isAnswered   Boolean?       @default(false) @map("is_answered")
  title        String         @db.VarChar
  userId       Int            @map("user_id")
  postStatusId Int?           @map("post_status_id")
  age          Int?
  gender       String?        @db.VarChar
  comments     comments[]
  files        files[]
  post_follows post_follows[]
  post_votes   post_votes[]
  postStatuses post_statuses? @relation(fields: [postStatusId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_statuses_fk")
  users        users          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
}

model refresh_tokens {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar
  userId    Int       @map("user_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  users     users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
}

model roles {
  id        Int          @id @default(autoincrement())
  name      String       @db.VarChar
  userRoles user_roles[]
}

model user_roles {
  id     Int   @id @default(autoincrement())
  userId Int   @map("user_id")
  roleId Int   @map("role_id")
  roles  roles @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "roles_fk")
  users  users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
}

model users {
  id                                           Int              @id @default(autoincrement())
  username                                     String           @unique(map: "username_unique") @db.VarChar
  hashedPassword                               String           @map("hashed_password") @db.VarChar
  createdAt                                    DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  email                                        String           @db.VarChar
  name                                         String?          @db.VarChar
  surname                                      String?          @db.VarChar
  pwz                                          String?          @db.VarChar
  pesel                                        String?          @db.VarChar
  comment_votes                                comment_votes[]
  comments                                     comments[]
  conversations_conversations_user1_idTousers  conversations[]  @relation("conversations_user1_idTousers")
  conversations_conversations_user2_idTousers  conversations[]  @relation("conversations_user2_idTousers")
  files                                        files[]
  messages_messages_recipient_idTousers        messages[]       @relation("messages_recipient_idTousers")
  messages_messages_sender_idTousers           messages[]       @relation("messages_sender_idTousers")
  notifications                                notifications[]
  post_follows                                 post_follows[]
  post_votes                                   post_votes[]
  posts                                        posts[]
  refreshTokens                                refresh_tokens[]
  user_follows_user_follows_follower_idTousers user_follows[]   @relation("user_follows_follower_idTousers")
  user_follows_user_follows_user_idTousers     user_follows[]   @relation("user_follows_user_idTousers")
  userRoles                                    user_roles[]
}

model post_votes {
  id     Int   @id @default(autoincrement())
  postId Int   @map("post_id")
  userId Int   @map("user_id")
  value  Int
  posts  posts @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_fk")
  users  users @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_fk")

  @@unique([userId, postId])
}

model comment_votes {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  commentId Int      @map("comment_id")
  value     Int
  comments  comments @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_fk")
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_fk")

  @@unique([userId, commentId], map: "comments_votes_user_id_post_id_key")
}

model notifications {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  type      String    @db.VarChar
  read      Boolean
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  metadata  Json      @db.Json
  users     users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_fk")
}

model post_follows {
  id         Int       @id @default(autoincrement())
  postId     Int       @map("post_id")
  followerId Int       @map("follower_id")
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  posts      posts     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_fk")
  users      users     @relation(fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "uer_fk")

  @@unique([postId, followerId], map: "unique_post_follow")
}

model user_follows {
  id                                    Int       @id @default(autoincrement())
  createdAt                             DateTime? @default(now()) @map("created_at") @db.Timetz(6)
  userId                                Int       @map("user_id")
  followerId                            Int       @map("follower_id")
  users_user_follows_follower_idTousers users     @relation("user_follows_follower_idTousers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "follower_fk")
  users_user_follows_user_idTousers     users     @relation("user_follows_user_idTousers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_fk")

  @@unique([userId, followerId], map: "unique_user_follow")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model conversations {
  id                                  Int        @id @default(autoincrement())
  user1Id                            Int @map("user1_id")
  user2Id                           Int @map("user2_id")
  lastMessageAt                     DateTime?  @db.Timestamptz(6) @map("last_message_at")
  user1 users      @relation("conversations_user1_idTousers", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user1_fk")
  user2 users      @relation("conversations_user2_idTousers", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user2_fk")
  messages                            messages[]
}

model messages {
  id                                 Int           @id @default(autoincrement())
  conversationId                    Int @map("conversation_id")
  senderId                          Int @map("sender_id")
  recipientId                       Int @map("recipient_id")
  content                            String        @db.VarChar
  createdAt                         DateTime?     @default(now()) @db.Timestamptz(6) @map("created_at")
  read                               Boolean?      @default(false)
  deleted                            Boolean?      @default(false)
  conversations                      conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "conversation_fk")
  users_messages_recipient_idTousers users         @relation("messages_recipient_idTousers", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "recipient_fk")
  users_messages_sender_idTousers    users         @relation("messages_sender_idTousers", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sender_fk")
}
